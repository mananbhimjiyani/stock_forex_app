name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  ECR_REPO: ${{ secrets.ECR_REPO }}
  DOCKER_IMAGE: ${{ secrets.ECR_REPO }}/django-app:latest

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.11.3

      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        working-directory: ./terraform
        run: terraform plan \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -var="aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Terraform Apply
        if: github.event_name == 'push'
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve \
          var="aws_region=${{ env.AWS_REGION }}" \
          var="aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          var="aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
  build-test-deploy:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.3'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Run Django tests
        run: |
          python manage.py test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }} .

      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.DOCKER_IMAGE }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Deploy to EKS
        run: |
          kubectl set image deployment/django-app django-app=${{ env.DOCKER_IMAGE }}
          kubectl rollout status deployment/django-app